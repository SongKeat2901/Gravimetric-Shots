; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
default_envs = gravimetric_shots
boards_dir = ./board
src_dir = src
description = Gravimetric Shots - BLE Espresso Scale Controller

[env]
platform = espressif32
board = T-Display-Long
framework = arduino
board_build.partitions = huge_app.csv

[env:gravimetric_shots]
extends = env
; Using local vendored libraries from lib/ instead of lib_deps
lib_deps =
    https://github.com/lewisxhe/XPowersLib.git

; =============================================================================
; Debug Environment - Wireless Monitoring via WebSerial (WiFi)
; =============================================================================
; This environment adds WiFi + WebSerial for wireless debug monitoring.
; Access debug output via web browser at: http://<ESP32-IP>/webserial
;
; Build & Upload:
;   pio run -e gravimetric_shots_debug --target upload
;
; Features:
;   - Debug output to BOTH USB Serial AND web browser
;   - Zero code changes (DEBUG_PRINT macros handle routing)
;   - WiFi credentials in src/wifi_credentials.h (not committed to git)
;   - Memory overhead: +40KB RAM, +40KB flash
;   - BLE coexistence optimized (WiFi low-latency mode)
;
; To disable: Use production environment instead
;   pio run -e gravimetric_shots
; =============================================================================
[env:gravimetric_shots_debug]
extends = env:gravimetric_shots
build_flags =
    -DWIRELESS_DEBUG
lib_deps =
    ${env:gravimetric_shots.lib_deps}
    https://github.com/ayushsharma82/WebSerial.git
    https://github.com/me-no-dev/ESPAsyncWebServer.git
    https://github.com/me-no-dev/AsyncTCP.git
